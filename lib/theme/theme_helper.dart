import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.whiteA700.withOpacity(0.7),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 28.fSize,
          fontFamily: 'AlfaSlabOne',
          //letterSpacing: 2,
          fontWeight: FontWeight.w100,
        ),
        headlineMedium: TextStyle(
            color: appTheme.whiteA700,
            fontSize: 18.fSize,
            fontFamily: 'AlfaSlabOne',
            //letterSpacing: 2,
            fontWeight: FontWeight.w100,
            shadows: [
              Shadow(
                color: Colors.black,
                offset: Offset(1, 3),
                blurRadius: 15,
              ),
            ]),
        bodySmall: TextStyle(
        // color: appTheme.whiteA700,
          fontSize: 16.fSize,
          fontFamily: 'Barlow',
          fontWeight: FontWeight.w100,

          foreground: Paint()
            ..style = PaintingStyle.stroke
            ..strokeWidth = 1
            ..color = Colors.white,
        ),
        bodyMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 28.fSize,
          fontFamily: 'Barlow',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get primary => Color(0XFFEB4F24);

  Color get violet => Color(0XFF5F022F);

  Color get green => Color(0XFF13A53D);

  // BlueGray
  Color get blueGray50 => Color(0XFFF1F2F2);

  // Cyan
  Color get cyan500 => Color(0XFF00D5BE);

  // DeepOrange
  Color get deepOrange900 => Color(0XFF96440C);

  // Gray
  Color get gray900 => Color(0XFF07191F);

  Color get gray90001 => Color(0XFF06191E);

  Color get gray90002 => Color(0XFF562500);

  // Green
  Color get greenLight => Color(0XFF0C8211);

  Color get greenDarker => Color(0XFF264512);

  Color get green700 => Color(0XFF318063);

  // Pink
  Color get pink900 => Color(0XFF68070E);

  // Teal
  Color get teal300 => Color(0XFF47A6C7);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
